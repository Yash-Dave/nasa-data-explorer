{"ast":null,"code":"```jsx\n// src/components/MarsPhotos.jsx\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  CircularProgress,\n  Grid,\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent\n} from '@mui/material';\nimport { fetchMarsPhotos } from '../api/nasa';\n\nexport default function MarsPhotos() {\n  const [rover, setRover]         = useState('curiosity');\n  const [sol, setSol]             = useState(1000);\n  const [photos, setPhotos]       = useState([]);\n  const [loading, setLoading]     = useState(false);\n  const [error, setError]         = useState(null);\n  const [selectedCamera, setSelectedCamera] = useState(null);\n\n  // Fetch photos\n  const loadPhotos = async (e) => {\n    if (e) e.preventDefault();\n    setLoading(true);\n    setError(null);\n    try {\n      const { photos: fetched } = await fetchMarsPhotos(rover, sol);\n      setPhotos(fetched || []);\n      setSelectedCamera(null);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch photos');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => { loadPhotos(); }, []);\n\n  // Group by camera\n  const grouped = useMemo(() => {\n    return photos.reduce((acc, p) => {\n      const cam = p.camera.full_name;\n      if (!acc[cam]) acc[cam] = [];\n      acc[cam].push(p);\n      return acc;\n    }, {});\n  }, [photos]);\n\n  // Category data\n  const categories = useMemo(() => {\n    return Object.entries(grouped).map(([cameraName, camPhotos]) => ({\n      cameraName,\n      coverUrl: camPhotos[0]?.img_src.replace(/^http:/\\//, 'https://'),\n      count: camPhotos.length\n    }));\n  }, [grouped]);\n\n  // Photos for selected category\n  const gallery = selectedCamera ? grouped[selectedCamera] : [];\n\n  if (loading) {\n    return (\n      <Box sx={{ textAlign: 'center', py: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n  if (error) {\n    return <Typography color=\"error\">{error}</Typography>;\n  }\n\n  return (\n    <Box component=\"section\" sx={{ mb: 4 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Mars Rover Photos\n      </Typography>\n\n      {/* Filters */}\n      <Box component=\"form\" onSubmit={loadPhotos} sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>\n        <TextField\n          select\n          label=\"Rover\"\n          value={rover}\n          onChange={e => setRover(e.target.value)}\n          SelectProps={{ native: true }}\n          sx={{ minWidth: 140 }}\n        >\n          {['curiosity','opportunity','spirit'].map(r => (\n            <option key={r} value={r}>\n              {r.charAt(0).toUpperCase() + r.slice(1)}\n            </option>\n          ))}\n        </TextField>\n\n        <TextField\n          label=\"Sol\"\n          type=\"number\"\n          value={sol}\n          onChange={e => setSol(+e.target.value)}\n          sx={{ width: 100 }}\n        />\n\n        <Button variant=\"contained\" type=\"submit\">\n          Fetch\n        </Button>\n      </Box>\n\n      {/* Category Grid */}\n      {!selectedCamera && (\n        <Grid container spacing={2}>\n          {categories.map(({ cameraName, coverUrl }) => (\n            <Grid item xs={6} sm={4} md={3} lg={2} key={cameraName}>\n              <Card\n                variant={selectedCamera===cameraName ? 'elevation' : 'outlined'}\n                onClick={() => setSelectedCamera(cameraName)}\n                sx={{ cursor: 'pointer' }}\n              >\n                <CardActionArea>\n                  {coverUrl && (\n                    <CardMedia\n                      component=\"img\"\n                      image={coverUrl}\n                      alt={cameraName}\n                      sx={{ height: 80, objectFit: 'cover' }}\n                    />\n                  )}\n                  <CardContent sx={{ py: 1, px: 1 }}>\n                    <Typography variant=\"body2\" align=\"center\" noWrap>\n                      {cameraName}\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      )}\n\n      {/* Gallery View */}\n      {selectedCamera && (\n        <>\n          <Button onClick={() => setSelectedCamera(null)} sx={{ mb: 2 }}>\n            ← Back to categories\n          </Button>\n          <Typography variant=\"h6\" gutterBottom>\n            {selectedCamera} Photos ({gallery.length})\n          </Typography>\n          <Grid container spacing={2}>\n            {gallery.map(photo => (\n              <Grid item xs={6} sm={4} md={3} key={photo.id}>\n                <Card>\n                  <CardActionArea\n                    href={photo.img_src.replace(/^http:\\/\\//, 'https://')}\n                    target=\"_blank\"\n                  >\n                    <CardMedia\n                      component=\"img\"\n                      image={photo.img_src.replace(/^http:\\/\\//, 'https://')}\n                      alt={photo.camera.full_name}\n                      sx={{ height: 120, objectFit: 'cover' }}\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      )}\n    </Box>\n  );\n}\n```;","map":{"version":3,"names":[],"sources":["/Users/yash/Desktop/projects/Bounce/nasa-data-explorer/frontend/src/components/MarsPhotos.jsx"],"sourcesContent":["```jsx\n// src/components/MarsPhotos.jsx\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  CircularProgress,\n  Grid,\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent\n} from '@mui/material';\nimport { fetchMarsPhotos } from '../api/nasa';\n\nexport default function MarsPhotos() {\n  const [rover, setRover]         = useState('curiosity');\n  const [sol, setSol]             = useState(1000);\n  const [photos, setPhotos]       = useState([]);\n  const [loading, setLoading]     = useState(false);\n  const [error, setError]         = useState(null);\n  const [selectedCamera, setSelectedCamera] = useState(null);\n\n  // Fetch photos\n  const loadPhotos = async (e) => {\n    if (e) e.preventDefault();\n    setLoading(true);\n    setError(null);\n    try {\n      const { photos: fetched } = await fetchMarsPhotos(rover, sol);\n      setPhotos(fetched || []);\n      setSelectedCamera(null);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch photos');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => { loadPhotos(); }, []);\n\n  // Group by camera\n  const grouped = useMemo(() => {\n    return photos.reduce((acc, p) => {\n      const cam = p.camera.full_name;\n      if (!acc[cam]) acc[cam] = [];\n      acc[cam].push(p);\n      return acc;\n    }, {});\n  }, [photos]);\n\n  // Category data\n  const categories = useMemo(() => {\n    return Object.entries(grouped).map(([cameraName, camPhotos]) => ({\n      cameraName,\n      coverUrl: camPhotos[0]?.img_src.replace(/^http:/\\//, 'https://'),\n      count: camPhotos.length\n    }));\n  }, [grouped]);\n\n  // Photos for selected category\n  const gallery = selectedCamera ? grouped[selectedCamera] : [];\n\n  if (loading) {\n    return (\n      <Box sx={{ textAlign: 'center', py: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n  if (error) {\n    return <Typography color=\"error\">{error}</Typography>;\n  }\n\n  return (\n    <Box component=\"section\" sx={{ mb: 4 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Mars Rover Photos\n      </Typography>\n\n      {/* Filters */}\n      <Box component=\"form\" onSubmit={loadPhotos} sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>\n        <TextField\n          select\n          label=\"Rover\"\n          value={rover}\n          onChange={e => setRover(e.target.value)}\n          SelectProps={{ native: true }}\n          sx={{ minWidth: 140 }}\n        >\n          {['curiosity','opportunity','spirit'].map(r => (\n            <option key={r} value={r}>\n              {r.charAt(0).toUpperCase() + r.slice(1)}\n            </option>\n          ))}\n        </TextField>\n\n        <TextField\n          label=\"Sol\"\n          type=\"number\"\n          value={sol}\n          onChange={e => setSol(+e.target.value)}\n          sx={{ width: 100 }}\n        />\n\n        <Button variant=\"contained\" type=\"submit\">\n          Fetch\n        </Button>\n      </Box>\n\n      {/* Category Grid */}\n      {!selectedCamera && (\n        <Grid container spacing={2}>\n          {categories.map(({ cameraName, coverUrl }) => (\n            <Grid item xs={6} sm={4} md={3} lg={2} key={cameraName}>\n              <Card\n                variant={selectedCamera===cameraName ? 'elevation' : 'outlined'}\n                onClick={() => setSelectedCamera(cameraName)}\n                sx={{ cursor: 'pointer' }}\n              >\n                <CardActionArea>\n                  {coverUrl && (\n                    <CardMedia\n                      component=\"img\"\n                      image={coverUrl}\n                      alt={cameraName}\n                      sx={{ height: 80, objectFit: 'cover' }}\n                    />\n                  )}\n                  <CardContent sx={{ py: 1, px: 1 }}>\n                    <Typography variant=\"body2\" align=\"center\" noWrap>\n                      {cameraName}\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      )}\n\n      {/* Gallery View */}\n      {selectedCamera && (\n        <>\n          <Button onClick={() => setSelectedCamera(null)} sx={{ mb: 2 }}>\n            ← Back to categories\n          </Button>\n          <Typography variant=\"h6\" gutterBottom>\n            {selectedCamera} Photos ({gallery.length})\n          </Typography>\n          <Grid container spacing={2}>\n            {gallery.map(photo => (\n              <Grid item xs={6} sm={4} md={3} key={photo.id}>\n                <Card>\n                  <CardActionArea\n                    href={photo.img_src.replace(/^http:\\/\\//, 'https://')}\n                    target=\"_blank\"\n                  >\n                    <CardMedia\n                      component=\"img\"\n                      image={photo.img_src.replace(/^http:\\/\\//, 'https://')}\n                      alt={photo.camera.full_name}\n                      sx={{ height: 120, objectFit: 'cover' }}\n                    />\n                  </CardActionArea>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      )}\n    </Box>\n  );\n}\n```\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}